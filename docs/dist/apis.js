define(["react"],(function(n){return function(){"use strict";var s={739:function(n,s,a){var t=a(537),p=a.n(t),o=a(645),e=a.n(o)()(p());e.push([n.id,".md_eATBI {\n  padding: 32px 200px 60px 0;\n}\n@media (max-width: 800px) {\n  .md_eATBI {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  .toc_Q86k4 {\n    display: none;\n  }\n}\n.toc_Q86k4 {\n  position: fixed;\n  margin-top: 90px;\n  right: 50px;\n  top: 0;\n}\n.list_ISPoe {\n  transition: all 0.3s ease;\n  background: #fff;\n  border: 3px solid #eee;\n  padding: 10px 14px 10px 0;\n}\n","",{version:3,sources:["webpack://./src/helper/markdown.less"],names:[],mappings:"AAAA;EACE,0BAAA;AACF;AAEA;EACE;IACE,kBAAA;IACA,mBAAA;EAAF;EAGA;IACE,aAAA;EADF;AACF;AAIA;EACE,eAAA;EACA,gBAAA;EACA,WAAA;EACA,MAAA;AAFF;AAKA;EACE,yBAAA;EACA,gBAAA;EACA,sBAAA;EACA,yBAAA;AAHF",sourcesContent:[".md {\n  padding: 32px 200px 60px 0;\n}\n\n@media (max-width: 800px) {\n  .md {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n\n  .toc {\n    display: none;\n  }\n}\n\n.toc {\n  position: fixed;\n  margin-top: 90px;\n  right: 50px;\n  top: 0;\n}\n\n.list {\n  transition: all .3s ease;\n  background: #fff;\n  border: 3px solid #eee;\n  padding: 10px 14px 10px 0;\n}\n"],sourceRoot:""}]),e.locals={md:"md_eATBI",toc:"toc_Q86k4",list:"list_ISPoe"},s.Z=e},645:function(n){n.exports=function(n){var s=[];return s.toString=function(){return this.map((function(s){var a="",t=void 0!==s[5];return s[4]&&(a+="@supports (".concat(s[4],") {")),s[2]&&(a+="@media ".concat(s[2]," {")),t&&(a+="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {")),a+=n(s),t&&(a+="}"),s[2]&&(a+="}"),s[4]&&(a+="}"),a})).join("")},s.i=function(n,a,t,p,o){"string"==typeof n&&(n=[[null,n,void 0]]);var e={};if(t)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(e[l]=!0)}for(var u=0;u<n.length;u++){var k=[].concat(n[u]);t&&e[k[0]]||(void 0!==o&&(void 0===k[5]||(k[1]="@layer".concat(k[5].length>0?" ".concat(k[5]):""," {").concat(k[1],"}")),k[5]=o),a&&(k[2]?(k[1]="@media ".concat(k[2]," {").concat(k[1],"}"),k[2]=a):k[2]=a),p&&(k[4]?(k[1]="@supports (".concat(k[4],") {").concat(k[1],"}"),k[4]=p):k[4]="".concat(p)),s.push(k))}},s}},537:function(n){n.exports=function(n){var s=n[1],a=n[3];if(!a)return s;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),p="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(p," */"),e=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[s].concat(e).concat([o]).join("\n")}return[s].join("\n")}},379:function(n){var s=[];function a(n){for(var a=-1,t=0;t<s.length;t++)if(s[t].identifier===n){a=t;break}return a}function t(n,t){for(var o={},e=[],c=0;c<n.length;c++){var l=n[c],u=t.base?l[0]+t.base:l[0],k=o[u]||0,r="".concat(u," ").concat(k);o[u]=k+1;var i=a(r),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==i)s[i].references++,s[i].updater(d);else{var g=p(d,t);t.byIndex=c,s.splice(c,0,{identifier:r,updater:g,references:1})}e.push(r)}return e}function p(n,s){var a=s.domAPI(s);return a.update(n),function(s){if(s){if(s.css===n.css&&s.media===n.media&&s.sourceMap===n.sourceMap&&s.supports===n.supports&&s.layer===n.layer)return;a.update(n=s)}else a.remove()}}n.exports=function(n,p){var o=t(n=n||[],p=p||{});return function(n){n=n||[];for(var e=0;e<o.length;e++){var c=a(o[e]);s[c].references--}for(var l=t(n,p),u=0;u<o.length;u++){var k=a(o[u]);0===s[k].references&&(s[k].updater(),s.splice(k,1))}o=l}}},569:function(n){var s={};n.exports=function(n,a){var t=function(n){if(void 0===s[n]){var a=document.querySelector(n);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(n){a=null}s[n]=a}return s[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(a)}},216:function(n){n.exports=function(n){var s=document.createElement("style");return n.setAttributes(s,n.attributes),n.insert(s,n.options),s}},565:function(n,s,a){n.exports=function(n){var s=a.nc;s&&n.setAttribute("nonce",s)}},795:function(n){n.exports=function(n){var s=n.insertStyleElement(n);return{update:function(a){!function(n,s,a){var t="";a.supports&&(t+="@supports (".concat(a.supports,") {")),a.media&&(t+="@media ".concat(a.media," {"));var p=void 0!==a.layer;p&&(t+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),t+=a.css,p&&(t+="}"),a.media&&(t+="}"),a.supports&&(t+="}");var o=a.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),s.styleTagTransform(t,n,s.options)}(s,n,a)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(s)}}}},589:function(n){n.exports=function(n,s){if(s.styleSheet)s.styleSheet.cssText=n;else{for(;s.firstChild;)s.removeChild(s.firstChild);s.appendChild(document.createTextNode(n))}}},161:function(s){s.exports=n}},a={};function t(n){var p=a[n];if(void 0!==p)return p.exports;var o=a[n]={id:n,exports:{}};return s[n](o,o.exports,t),o.exports}t.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(s,{a:s}),s},t.d=function(n,s){for(var a in s)t.o(s,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:s[a]})},t.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var p={};return function(){t.r(p),t.d(p,{default:function(){return b}});var n=t(161),s=t.n(n),a=t(379),o=t.n(a),e=t(795),c=t.n(e),l=t(569),u=t.n(l),k=t(565),r=t.n(k),i=t(216),d=t.n(i),g=t(589),m=t.n(g),f=t(739),y={};y.styleTagTransform=m(),y.setAttributes=r(),y.insert=u().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=d(),o()(f.Z,y);var w=f.Z&&f.Z.locals?f.Z.locals:void 0,v=function(n){var a=n.data;return s().createElement(s().Fragment,null,s().createElement("div",{className:"".concat(w.md," markdown-body"),dangerouslySetInnerHTML:{__html:a.content}}),a.toc?s().createElement("div",{className:w.toc},s().createElement("div",{className:"".concat(w.list," markdown-body"),dangerouslySetInnerHTML:{__html:a.toc}})):null)},h={content:'<h1>\n  <a href="#api" id="api"></a>API\n</h1><p>VariousJS 的 API 及 TS 类型都由 <code>@variousjs/various</code> 包提供</p>\x3c!-- toc --\x3e\n\n<h2>\n  <a href="#全局-api" id="全局-api"></a>全局 API\n</h2><p>以下 API 可全局使用</p><h3>\n  <a href="#createcomponent" id="createcomponent"></a>createComponent\n</h3><p>根据组件名字创建一个新的 React 组件，该组件名字必须在页面配置 <code>components</code> 已经定义</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">createComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> React<span class="token punctuation">.</span>ComponentType<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n  $silent<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token comment">// 安静模式，不使用全局加载组件及出错组件</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token operator">></span></code></pre><p>示例</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token string">\'component-t\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#rendercomponent" id="rendercomponent"></a>renderComponent\n</h3><p>根据组件配置或者指定组件路径生成一个 React 组件，并渲染到指定的页面 dom 节点</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> renderComponent<span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>                 <span class="token comment">// 组件名字，如果不指定 url 配置，则使用页面组件配置</span>\n  url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>                 <span class="token comment">// 组件 url 地址，如果指定则替换页面组件配置</span>\n  module<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>              <span class="token comment">// 使用组件导出的模块</span>\n  props<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token comment">// 组件属性</span>\n  target<span class="token operator">:</span> Element <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>       <span class="token comment">// 渲染节点</span>\n  onMounted<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>       <span class="token comment">// 组件加载成功事件</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>                <span class="token comment">// 返回移除组件方法</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> renderComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token function-variable function">unMount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n\n  <span class="token function">omponentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">onMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>unMount <span class="token operator">=</span> <span class="token function">renderComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">\'component-b\'</span><span class="token punctuation">,</span>\n      target<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#dom\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      props<span class="token operator">:</span> <span class="token punctuation">{</span>\n        text<span class="token operator">:</span> <span class="token string">\'text\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">onMounted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'success\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dom<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onMount<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Render</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#getenv" id="getenv"></a>getEnv\n</h3><p>获取当前运行环境 <code>development</code> ｜ <code>production</code>。环境由页面配置定义</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">getEnv</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'development\'</span> <span class="token operator">|</span> <span class="token string">\'production\'</span></code></pre><h3>\n  <a href="#getconfig" id="getconfig"></a>getConfig\n</h3><p>获取当前页面配置参数</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">getConfig</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span></code></pre><h3>\n  <a href="#oncomponentmounted" id="oncomponentmounted"></a>onComponentMounted\n</h3><p>监听一个或多个组件加载成功事件，返回移除监听事件方法</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">onComponentMounted</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre><p>示例</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> onComponentMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> un <span class="token operator">=</span> <span class="token function">onComponentMounted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'component-a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'loaded\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> un\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#preloadcomponents" id="preloadcomponents"></a>preloadComponents\n</h3><p>预加载指定的组件</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">preloadComponents</span><span class="token operator">:</span> <span class="token punctuation">(</span>names<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></code></pre><h3>\n  <a href="#getmountedcomponents" id="getmountedcomponents"></a>getMountedComponents\n</h3><p>获取当前页面装载的组件（注意不是加载完成的组件）</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">getMountedComponents</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h3>\n  <a href="#iscomponentloaded" id="iscomponentloaded"></a>isComponentLoaded\n</h3><p>判断某个组件是否已经加载完成（不一定在当前页面装载）</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">isComponentLoaded</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span></code></pre><h2>\n  <a href="#状态管理" id="状态管理"></a>状态管理\n</h2><p>VariousJS 核心基于 <a href="https://github.com/fratercula/nycticorax">nycticorax</a> 同时 nycticorax 也是状态容器，提供状态管理。所以 VariousJS 提供 <code>Store</code> 对象用于管理组件的状态</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Store<span class="token punctuation">,</span> Dispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> connect<span class="token punctuation">,</span> emit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store<span class="token operator">&lt;</span>State<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2>\n  <a href="#组件-api" id="组件-api"></a>组件 API\n</h2><p>此类 API 只能在组件内使用</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// 普通组件 API</span>\n<span class="token keyword">interface</span> <span class="token class-name">ComponentProps<span class="token operator">&lt;</span>Store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  $store<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Store<span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">$dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">$postMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">$t</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 错误组件 API</span>\n<span class="token keyword">interface</span> <span class="token class-name">ErrorProps<span class="token operator">&lt;</span>Store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  $reload<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  $type<span class="token operator">:</span> <span class="token string">\'LOADING_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'DEPENDENCIES_LOADING_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'NOT_DEFINED\'</span> <span class="token operator">|</span> <span class="token string">\'INVALID_COMPONENT\'</span> <span class="token operator">|</span> <span class="token string">\'SCRIPT_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'CONTAINER_ERROR\'</span><span class="token punctuation">,</span>\n  $message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  $store<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Store<span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 加载组件 API</span>\n<span class="token keyword">interface</span> <span class="token class-name">LoaderProps<span class="token operator">&lt;</span>Store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  $store<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Store<span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#store" id="store"></a>$store\n</h3><p>获取当前配置的全局数据，全局数据可以通过配置定义的 actions 改变全局数据</p><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">R</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>ComponentProps<span class="token operator">&lt;</span>State<span class="token operator">>></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>$store<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">R</span></code></pre><h3>\n  <a href="#dispatch" id="dispatch"></a>$dispatch\n</h3><p>调用其他组件方法或者全局定义的方法，调用之前需知道具体组件名及事件名</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// name 通信组件：store(全局) / 组件名字</span>\n<span class="token comment">// method 方法：调用全局或者其他组件提供的方法</span>\n<span class="token comment">// value 值：传递的参数</span>\n<span class="token keyword">type</span> <span class="token class-name">$dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component<span class="token operator">&lt;</span>ComponentProps<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">$dispatch</span><span class="token punctuation">(</span><span class="token string">\'component-a\'</span><span class="token punctuation">,</span> <span class="token string">\'getValue\'</span><span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Dispatch</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#postmessage" id="postmessage"></a>$postMessage\n</h3><p>此方法用于组件广播事件，其他组件可以进行消息监听获取广播消息</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// event: 广播事件名</span>\n<span class="token comment">// value：广播事件值</span>\n<span class="token keyword">type</span> <span class="token class-name">$postMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component<span class="token operator">&lt;</span>ComponentProps<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">onMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">$postMessage</span><span class="token punctuation">(</span><span class="token string">\'some-method\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">\'data\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onMessage<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">PostMessage</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#t" id="t"></a>$t\n</h3><p>国际化函数，使用前需定义国际化文案</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">$t</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps<span class="token punctuation">,</span> Ii8n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n<span class="token keyword">import</span> Zh <span class="token keyword">from</span> <span class="token string">\'./i18n/zh.json\'</span>\n<span class="token keyword">import</span> En <span class="token keyword">from</span> <span class="token string">\'./i18n/en.json\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name">Component<span class="token operator">&lt;</span>ComponentProps<span class="token operator">></span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> $i18n<span class="token operator">:</span> <span class="token function-variable function">Ii8n</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    localeKey<span class="token operator">:</span> <span class="token string">\'locale\'</span><span class="token punctuation">,</span>\n    resources<span class="token operator">:</span> <span class="token punctuation">{</span>\n      zh<span class="token operator">:</span> Zh<span class="token punctuation">,</span>\n      en<span class="token operator">:</span> En<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> $t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#reload" id="reload"></a>$reload\n</h3><p>此方法只在全局错误组件提供，用于重试加载当前组件，使用前需判断是否存在</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">$reload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ErrorProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">const</span> errorComponent<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>ErrorProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> $reload <span class="token punctuation">}</span> <span class="token operator">=</span> props\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>\n        $reload <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>$reload<span class="token punctuation">}</span></span>\n        <span class="token punctuation">></span></span><span class="token plain-text">\n          刷新\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> errorComponent</code></pre><h3>\n  <a href="#type" id="type"></a>$type\n</h3><p>此属性只有在全局错误组件提供，说明当前组件错误类型</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">$<span class="token keyword">type</span></span> <span class="token operator">=</span> <span class="token string">\'LOADING_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'DEPENDENCIES_LOADING_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'NOT_DEFINED\'</span> <span class="token operator">|</span> <span class="token string">\'INVALID_COMPONENT\'</span> <span class="token operator">|</span> <span class="token string">\'SCRIPT_ERROR\'</span> <span class="token operator">|</span> <span class="token string">\'CONTAINER_ERROR\'</span></code></pre><p>类型说明</p><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n<th>是否可以重新加载</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LOADING_ERROR</td>\n<td>组件加载失败</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>DEPENDENCIES_LOADING_ERROR</td>\n<td>组件依赖加载失败</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>NOT_DEFINED</td>\n<td>组件未定义</td>\n<td>no</td>\n</tr>\n<tr>\n<td>INVALID_COMPONENT</td>\n<td>错误的组件类型</td>\n<td>no</td>\n</tr>\n<tr>\n<td>SCRIPT_ERROR</td>\n<td>组件运行出错了</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>CONTAINER_ERROR</td>\n<td>容器组件出错了</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<h3>\n  <a href="#message" id="message"></a>$message\n</h3><p>此属性只有在全局错误组件提供，说明当前组件错误详细信息</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">$message</span> <span class="token operator">=</span> <span class="token builtin">string</span></code></pre><h2>\n  <a href="#组件静态属性" id="组件静态属性"></a>组件静态属性\n</h2><p>以下都是组件的静态属性类型提供，静态属性是 VariousJS 组件的重要功能提供：组件通信，国际化等</p><h3>\n  <a href="#i18n" id="i18n"></a>I18n\n</h3><p>此属性用于国际化配置提供，对应组件的静态属性名: $i18n</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// localeKey: 指定当前国际化语言绑定的全局 store key</span>\n<span class="token comment">// resources: 国际化文案</span>\n<span class="token keyword">type</span> <span class="token class-name">Ii8n</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  localeKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  resources<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">>></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">FC</span><span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps<span class="token punctuation">,</span> Ii8n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n<span class="token keyword">import</span> Zh <span class="token keyword">from</span> <span class="token string">\'./i18n/zh.json\'</span>\n<span class="token keyword">import</span> En <span class="token keyword">from</span> <span class="token string">\'./i18n/en.json\'</span>\n\n<span class="token comment">/*\njson example\n{\n  "title": "Title",\n  "hello": "Hello, {name}, {name2}"\n}\n*/</span>\n\n<span class="token keyword">const</span> <span class="token constant">F</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>ComponentProps<span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> $i18n<span class="token operator">:</span> Ii8n <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> $t<span class="token punctuation">,</span> $dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> props\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>lang<span class="token punctuation">,</span> setLang<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getLang</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> current<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$dispatch</span><span class="token punctuation">(</span><span class="token string">\'store\'</span><span class="token punctuation">,</span> <span class="token string">\'getLocale\'</span><span class="token punctuation">)</span>\n    <span class="token function">setLang</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">\'title\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">$dispatch</span><span class="token punctuation">(</span><span class="token string">\'store\'</span><span class="token punctuation">,</span> <span class="token string">\'setLocale\'</span><span class="token punctuation">,</span> <span class="token string">\'zh-CN\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Set Locale</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getLang<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Get Locale</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n  )\n}\n\nF.$i18n = () => (</span><span class="token punctuation">{</span>\n  localeKey<span class="token operator">:</span> <span class="token string">\'locale\'</span><span class="token punctuation">,</span>\n  resources<span class="token operator">:</span> <span class="token punctuation">{</span>\n    zh<span class="token operator">:</span> Zh<span class="token punctuation">,</span>\n    en<span class="token operator">:</span> En<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token plain-text">)\n\nexport default F</span></code></pre><h3>\n  <a href="#invoker" id="invoker"></a>Invoker\n</h3><p>用于定义组件通信方法，定义被其他组件调用的方法</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// value: 调用的值</span>\n<span class="token comment">// trigger: 调用来源组件名</span>\n<span class="token keyword">type</span> <span class="token class-name">Invoker</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Invoker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component <span class="token punctuation">{</span>\n  <span class="token comment">// 提供一个 `updateValue 方法`</span>\n  <span class="token keyword">static</span> updateValue<span class="token operator">:</span> <span class="token function-variable function">Invoker</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">A</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#messageinvoker" id="messageinvoker"></a>MessageInvoker\n</h3><p>定义监听其他组件有广播的消息，对应属性名: $onMessage</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// event: 消息事件名</span>\n<span class="token comment">// component: 广播消息组件名</span>\n<span class="token comment">// value: 消息值</span>\n<span class="token keyword">type</span> <span class="token class-name">MessageInvoker</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  message<span class="token operator">:</span> <span class="token punctuation">{</span> event<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> component<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span></code></pre><p>示例</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps<span class="token punctuation">,</span> Store<span class="token punctuation">,</span> MessageInvoker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span> component<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> connect<span class="token punctuation">,</span> emit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store<span class="token operator">&lt;</span>State<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token constant">G</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>State<span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> $onMessage<span class="token operator">:</span> MessageInvoker <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>component<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>event<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token constant">G</span><span class="token punctuation">.</span><span class="token function-variable function">$onMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 监听其他组件广播的消息，并传递给当前组件</span>\n  <span class="token comment">// 由于静态属性不能访问组件实例，所以需要借用状态管理能力</span>\n  <span class="token function">emit</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">\'component\'</span><span class="token punctuation">,</span> <span class="token string">\'event\'</span><span class="token punctuation">,</span> <span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">G</span><span class="token punctuation">)</span></code></pre><h2>\n  <a href="#其他" id="其他"></a>其他\n</h2><h3>\n  <a href="#actions" id="actions"></a>Actions\n</h3><p>定义改变全局数据方法类型</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// nycticorax: https://github.com/fratercula/nycticorax</span>\n<span class="token comment">// value: 调用值</span>\n<span class="token comment">// trigger: 调用组件名</span>\n<span class="token keyword">type</span> <span class="token class-name">Dispatch<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  nycticorax<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">getStore</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token function-variable function">emit</span><span class="token operator">:</span> <span class="token punctuation">(</span>next<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  trigger<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>\n\n<span class="token keyword">type</span> <span class="token class-name">Actions<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">>></span></code></pre><p>示例</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Actions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@variousjs/various\'</span>\n\n<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span> locale<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> actions<span class="token operator">:</span> Actions<span class="token operator">&lt;</span>State<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token punctuation">{</span> emit <span class="token punctuation">}</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> locale<span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">async</span> <span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">{</span> getStore <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">getStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>locale\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> actions</code></pre>',toc:'<ul>\n<li><a href="#%E5%85%A8%E5%B1%80-api">全局 API</a><ul>\n<li><a href="#createcomponent">createComponent</a></li>\n<li><a href="#rendercomponent">renderComponent</a></li>\n<li><a href="#getenv">getEnv</a></li>\n<li><a href="#getconfig">getConfig</a></li>\n<li><a href="#oncomponentmounted">onComponentMounted</a></li>\n<li><a href="#preloadcomponents">preloadComponents</a></li>\n<li><a href="#getmountedcomponents">getMountedComponents</a></li>\n<li><a href="#iscomponentloaded">isComponentLoaded</a></li>\n</ul>\n</li>\n<li><a href="#%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86">状态管理</a></li>\n<li><a href="#%E7%BB%84%E4%BB%B6-api">组件 API</a><ul>\n<li><a href="#store">$store</a></li>\n<li><a href="#dispatch">$dispatch</a></li>\n<li><a href="#postmessage">$postMessage</a></li>\n<li><a href="#t">$t</a></li>\n<li><a href="#reload">$reload</a></li>\n<li><a href="#type">$type</a></li>\n<li><a href="#message">$message</a></li>\n</ul>\n</li>\n<li><a href="#%E7%BB%84%E4%BB%B6%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7">组件静态属性</a><ul>\n<li><a href="#i18n">I18n</a></li>\n<li><a href="#invoker">Invoker</a></li>\n<li><a href="#messageinvoker">MessageInvoker</a></li>\n</ul>\n</li>\n<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>\n<li><a href="#actions">Actions</a></li>\n</ul>\n</li>\n</ul>\n'},b=function(){return s().createElement(v,{data:h})}}(),p}()}));
//# sourceMappingURL=apis.js.map