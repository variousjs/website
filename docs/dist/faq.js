define(["react"],(function(n){return function(){"use strict";var s={739:function(n,s,a){var t=a(537),p=a.n(t),o=a(645),e=a.n(o)()(p());e.push([n.id,".md_eATBI {\n  padding: 32px 200px 60px 0;\n}\n@media (max-width: 800px) {\n  .md_eATBI {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  .toc_Q86k4 {\n    display: none;\n  }\n}\n.toc_Q86k4 {\n  position: fixed;\n  margin-top: 90px;\n  right: 50px;\n  top: 0;\n  overflow-y: auto;\n  bottom: 50px;\n  border: 3px solid #eee;\n}\n.list_ISPoe {\n  transition: all 0.3s ease;\n  background: #fff;\n  padding: 10px 14px 10px 0;\n}\n","",{version:3,sources:["webpack://./src/helper/markdown.less"],names:[],mappings:"AAAA;EACE,0BAAA;AACF;AAEA;EACE;IACE,kBAAA;IACA,mBAAA;EAAF;EAGA;IACE,aAAA;EADF;AACF;AAIA;EACE,eAAA;EACA,gBAAA;EACA,WAAA;EACA,MAAA;EACA,gBAAA;EACA,YAAA;EACA,sBAAA;AAFF;AAKA;EACE,yBAAA;EACA,gBAAA;EACA,yBAAA;AAHF",sourcesContent:[".md {\n  padding: 32px 200px 60px 0;\n}\n\n@media (max-width: 800px) {\n  .md {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n\n  .toc {\n    display: none;\n  }\n}\n\n.toc {\n  position: fixed;\n  margin-top: 90px;\n  right: 50px;\n  top: 0;\n  overflow-y: auto;\n  bottom: 50px;\n  border: 3px solid #eee;\n}\n\n.list {\n  transition: all .3s ease;\n  background: #fff;\n  padding: 10px 14px 10px 0;\n}\n"],sourceRoot:""}]),e.locals={md:"md_eATBI",toc:"toc_Q86k4",list:"list_ISPoe"},s.Z=e},645:function(n){n.exports=function(n){var s=[];return s.toString=function(){return this.map((function(s){var a="",t=void 0!==s[5];return s[4]&&(a+="@supports (".concat(s[4],") {")),s[2]&&(a+="@media ".concat(s[2]," {")),t&&(a+="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {")),a+=n(s),t&&(a+="}"),s[2]&&(a+="}"),s[4]&&(a+="}"),a})).join("")},s.i=function(n,a,t,p,o){"string"==typeof n&&(n=[[null,n,void 0]]);var e={};if(t)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(e[l]=!0)}for(var r=0;r<n.length;r++){var u=[].concat(n[r]);t&&e[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),a&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=a):u[2]=a),p&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=p):u[4]="".concat(p)),s.push(u))}},s}},537:function(n){n.exports=function(n){var s=n[1],a=n[3];if(!a)return s;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),p="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(p," */"),e=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[s].concat(e).concat([o]).join("\n")}return[s].join("\n")}},379:function(n){var s=[];function a(n){for(var a=-1,t=0;t<s.length;t++)if(s[t].identifier===n){a=t;break}return a}function t(n,t){for(var o={},e=[],c=0;c<n.length;c++){var l=n[c],r=t.base?l[0]+t.base:l[0],u=o[r]||0,i="".concat(r," ").concat(u);o[r]=u+1;var k=a(i),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==k)s[k].references++,s[k].updater(d);else{var m=p(d,t);t.byIndex=c,s.splice(c,0,{identifier:i,updater:m,references:1})}e.push(i)}return e}function p(n,s){var a=s.domAPI(s);return a.update(n),function(s){if(s){if(s.css===n.css&&s.media===n.media&&s.sourceMap===n.sourceMap&&s.supports===n.supports&&s.layer===n.layer)return;a.update(n=s)}else a.remove()}}n.exports=function(n,p){var o=t(n=n||[],p=p||{});return function(n){n=n||[];for(var e=0;e<o.length;e++){var c=a(o[e]);s[c].references--}for(var l=t(n,p),r=0;r<o.length;r++){var u=a(o[r]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}o=l}}},569:function(n){var s={};n.exports=function(n,a){var t=function(n){if(void 0===s[n]){var a=document.querySelector(n);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(n){a=null}s[n]=a}return s[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(a)}},216:function(n){n.exports=function(n){var s=document.createElement("style");return n.setAttributes(s,n.attributes),n.insert(s,n.options),s}},565:function(n,s,a){n.exports=function(n){var s=a.nc;s&&n.setAttribute("nonce",s)}},795:function(n){n.exports=function(n){var s=n.insertStyleElement(n);return{update:function(a){!function(n,s,a){var t="";a.supports&&(t+="@supports (".concat(a.supports,") {")),a.media&&(t+="@media ".concat(a.media," {"));var p=void 0!==a.layer;p&&(t+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),t+=a.css,p&&(t+="}"),a.media&&(t+="}"),a.supports&&(t+="}");var o=a.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),s.styleTagTransform(t,n,s.options)}(s,n,a)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(s)}}}},589:function(n){n.exports=function(n,s){if(s.styleSheet)s.styleSheet.cssText=n;else{for(;s.firstChild;)s.removeChild(s.firstChild);s.appendChild(document.createTextNode(n))}}},161:function(s){s.exports=n}},a={};function t(n){var p=a[n];if(void 0!==p)return p.exports;var o=a[n]={id:n,exports:{}};return s[n](o,o.exports,t),o.exports}t.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(s,{a:s}),s},t.d=function(n,s){for(var a in s)t.o(s,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:s[a]})},t.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0;var p={};return function(){t.r(p),t.d(p,{default:function(){return w}});var n=t(161),s=t.n(n),a=t(379),o=t.n(a),e=t(795),c=t.n(e),l=t(569),r=t.n(l),u=t(565),i=t.n(u),k=t(216),d=t.n(k),m=t(589),f=t.n(m),g=t(739),y={};y.styleTagTransform=f(),y.setAttributes=i(),y.insert=r().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=d(),o()(g.Z,y);var A=g.Z&&g.Z.locals?g.Z.locals:void 0,h=function(n){var a=n.data;return s().createElement(s().Fragment,null,s().createElement("div",{className:"".concat(A.md," markdown-body"),dangerouslySetInnerHTML:{__html:a.content}}),a.toc?s().createElement("div",{className:A.toc},s().createElement("div",{className:"".concat(A.list," markdown-body"),dangerouslySetInnerHTML:{__html:a.toc}})):null)},E={content:'<h1>\n  <a href="#faq" id="faq"></a>FAQ\n</h1><p>以下是使用 VariousJS 可能遇到的问题</p>\x3c!-- toc --\x3e\n\n<h3>\n  <a href="#使用的第三方插件或者组件没有提供-amd-导出" id="使用的第三方插件或者组件没有提供-amd-导出"></a>使用的第三方插件或者组件没有提供 AMD 导出\n</h3><p>可以引入插件自行导出 AMD 格式，例如 <a href="https://unpkg.com/browse/react-syntax-highlighter@15.4.5/dist/">react-syntax-highlighter</a> 只有 <code>commonjs</code>，及 <code>es modules</code> 导出，但可以这样导出 AMD 格式</p><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Prism <span class="token keyword">as</span> SyntaxHighlighter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-syntax-highlighter\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> base16AteliersulphurpoolLight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-syntax-highlighter/dist/esm/styles/prism\'</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  language<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">H</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> language <span class="token punctuation">}</span> <span class="token operator">=</span> props\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SyntaxHighlighter</span></span> <span class="token attr-name">language</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>language<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>base16AteliersulphurpoolLight<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SyntaxHighlighter</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">H</span></code></pre><h3>\n  <a href="#如何设置-momentjs-为中文" id="如何设置-momentjs-为中文"></a>如何设置 momentjs 为中文\n</h3><p>可以参考以下对 <code>moment</code> 的依赖引入进行一些修改</p><ol>\n<li>修改中文语言的 <code>moment</code> 核心引入方式，原 <a href="https://unpkg.com/browse/moment@2.29.1/locale/zh-cn.js">zh-cn</a> 语言包引入 <code>moment</code> 是相对路径方式 <code>../moment</code>，需要改成 <code>moment</code>，因为 VariousJS 环境下，直接引入 <code>moment</code> 了。修改后参考</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token comment">//! moment.js locale configuration</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">!==</span> <span class="token string">\'undefined\'</span>\n      <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'moment\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>\n  <span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd <span class="token operator">?</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'moment\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token operator">:</span>\n  <span class="token function">factory</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>moment<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">moment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2">\n<li>在 VariousJS 配置中 <code>dependencies</code> 添加刚刚修改后的中文语言包</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">VARIOUS_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">moment</span><span class="token operator">:</span> <span class="token string">\'https://cdn.jsdelivr.net/npm/moment@2.29.1/min/moment.min.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">moment_zhCN</span><span class="token operator">:</span> <span class="token string">\'./zh-cn.js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span></code></pre><ol start="3">\n<li>接下来，需要对 <code>moment</code> 进行中文语言初始化，在主体组件进行初始化</li>\n</ol>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">\'moment\'</span>\n<span class="token keyword">import</span> <span class="token string">\'moment_zhCN\'</span>\n\nmoment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">\'zh-cn\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> actions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./dispatcher\'</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./store\'</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./container\'</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./loading\'</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Error <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./error\'</span></code></pre><h3>\n  <a href="#依赖的插件没有-ts-类型提示" id="依赖的插件没有-ts-类型提示"></a>依赖的插件没有 ts 类型提示\n</h3><p>因为插件/组件的使用都是 <code>cdn</code> 链接引入，并没有本地安装，所以不能 ts 类型提示，解决办法就是安装对应插件依赖。除了这个方式，还可以自行定义 ts 类型</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// declaration.d.ts</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">\'antd\'</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentType<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n  <span class="token keyword">export</span> <span class="token keyword">const</span> Button<span class="token operator">:</span> ComponentType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>\n  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Collapse</span> <span class="token keyword">extends</span> <span class="token class-name">Component<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> Panel<span class="token operator">:</span> ComponentType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">export</span> <span class="token keyword">const</span> locales<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre><h3>\n  <a href="#组件状态被刷新" id="组件状态被刷新"></a>组件状态被刷新\n</h3><p>请注意在容器组件不能进行 <code>state</code> 操作，因为一旦刷新状态，就会导致功能组件被重新加载。所以容器组件应该作为组件位置结构描述组件，不参与其他任何功能</p><h3>\n  <a href="#使用不同版本的-react" id="使用不同版本的-react"></a>使用不同版本的 React\n</h3><p>通常可以直接修改 <code>VARIOUS_CONFIG</code> 配置的依赖配置引入的 react URL 路径即可修改 react 版本。如果某个组件有特殊需求，react 版本跟依赖版本不一致，可以将当前组件的 react 依赖不要进行 webpack externals 处理。这样处理后，该组件就可以有自己的 react 版本了</p><blockquote>\n<p>默认 react 版本 18.x，react-dom 版本需要 &gt;= 18</p></blockquote>\n<h3>\n  <a href="#组件太多太细同时网络请求过多" id="组件太多太细同时网络请求过多"></a>组件太多太细同时网络请求过多\n</h3><p>在 VariousJS 体系下，页面可以任意拆分成细组件，但是这样会导致组件非常多，请求也变多。所以 VariousJS 组件支持导出多个功能组件。可以参照以下写法</p><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// m 组件，路径为 \'./dist/m.js\'</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">X</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Y</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre><p>以上同时导出 <code>X</code>， <code>Y</code> 组件，使用时候需要注意</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">var</span> <span class="token constant">VARIOUS_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 指定组件名记路径</span>\n    <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token string">\'./dist/m.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// 分别使用 X， Y 组件</span>\n        <span class="token punctuation">[</span>\n          <span class="token string">\'m.X\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'m.Y\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上方式处理，可以将多个组件合并成一个 js 文件，减少网络请求</p>',toc:'<ul>\n<li><a href="#%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%E6%88%96%E8%80%85%E7%BB%84%E4%BB%B6%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B-amd-%E5%AF%BC%E5%87%BA">使用的第三方插件或者组件没有提供 AMD 导出</a></li>\n<li><a href="#%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE-momentjs-%E4%B8%BA%E4%B8%AD%E6%96%87">如何设置 momentjs 为中文</a></li>\n<li><a href="#%E4%BE%9D%E8%B5%96%E7%9A%84%E6%8F%92%E4%BB%B6%E6%B2%A1%E6%9C%89-ts-%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA">依赖的插件没有 ts 类型提示</a></li>\n<li><a href="#%E7%BB%84%E4%BB%B6%E7%8A%B6%E6%80%81%E8%A2%AB%E5%88%B7%E6%96%B0">组件状态被刷新</a></li>\n<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84-react">使用不同版本的 React</a></li>\n<li><a href="#%E7%BB%84%E4%BB%B6%E5%A4%AA%E5%A4%9A%E5%A4%AA%E7%BB%86%E5%90%8C%E6%97%B6%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E5%A4%9A">组件太多太细同时网络请求过多</a></li>\n</ul>\n'},w=function(){return s().createElement(h,{data:E})}}(),p}()}));
//# sourceMappingURL=faq.js.map